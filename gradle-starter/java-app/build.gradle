/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.2.1/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building an application
    id 'application'
}

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    implementation 'com.google.guava:guava:27.0.1-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

// Define the main class for the application
mainClassName = 'zemian.gradlestarter.javaapp.App'

/*
Gradle Bug: The generated 'java-app' can't be run in minsys shell.
*/
startScripts {
    defaultJvmOpts = ["-Xms64m", "-Xmx516m",'-Dfoo.bar=true']
    // NOTE the classpath is relative to "$APP_HOME/lib"
    // and the original "classpath" contains separate entries
    // for each jar file!
    
    // Sample 1 - append
    // classpath += files("conf", "../conf2", "/conf3", "\$APP_HOME/conf4")

    // Sample 2 - do not append
    classpath = files("conf", "lib/*")

    /**
    NOTE: This is NOT needed if you use "./*" instead of "lib/*"!

     * The startScripts produces scripts that contain `$APP_HOME/lib/lib` in the classpath
     * so we need to tweak it a bit to be able to add the whole lib directory to the classpath :|
     *
     * While we are add it we add current dir + lib/logging and lib/* to allow user to setup logging
     * and additional/override jar dependencies.
     * See https://stackoverflow.com/questions/10518603/adding-classpath-entries-using-gradles-application-plugin
     
    doLast {
        def windowsScriptFile = file getWindowsScript()
        def unixScriptFile = file getUnixScript()
        windowsScriptFile.text = windowsScriptFile.text.replace('%APP_HOME%\\lib\\lib', '%DIRNAME%\\lib\\logging;%DIRNAME%\\lib\\*;%APP_HOME%\\lib\\*')
        unixScriptFile.text = unixScriptFile.text.replace('$APP_HOME/lib/lib', '$SAVED/lib/logging:$SAVED/lib/*:$APP_HOME/lib/*')
    }*/
}